require "active_html_tags/version"
require "active_html_tags/railtie"

module ActiveHtmlTags
  HTML_TAGS = [
    :a,
    :abbr,
    :acronym,
    :address,
    :applet,
    :area,
    :article,
    :aside,
    :audio,
    :b,
    :base,
    :basefont,
    :bb,
    :bdo,
    :big,
    :blockquote,
    :body,
    :button,
    :canvas,
    :caption,
    :center,
    :cite,
    :code,
    :col,
    :colgroup,
    :command,
    :datagrid,
    :datalist,
    :dd,
    :del,
    :details,
    :dfn,
    :dialog,
    :dir,
    :div,
    :dl,
    :dt,
    :em,
    :embed,
    :eventsource,
    :fieldset,
    :figcaption,
    :figure,
    :font,
    :footer,
    :form,
    :frame,
    :frameset,
    :h1,
    :h2,
    :h3,
    :h4,
    :h5,
    :h6,
    :head,
    :header,
    :hgroup,
    :html,
    :i,
    :iframe,
    :img,
    :input,
    :ins,
    :isindex,
    :kbd,
    :keygen,
    :label,
    :legend,
    :li,
    :link,
    :map,
    :mark,
    :menu,
    :meta,
    :meter,
    :nav,
    :noframes,
    :noscript,
    :object,
    :ol,
    :optgroup,
    :option,
    :output,
    :p,
    :param,
    :pre,
    :progress,
    :q,
    :rp,
    :rt,
    :ruby,
    :s,
    :samp,
    :script,
    :section,
    :select,
    :small,
    :source,
    :span,
    :strike,
    :strong,
    :style,
    :sub,
    :sup,
    :table,
    :tbody,
    :td,
    :textarea,
    :tfoot,
    :th,
    :thead,
    :time,
    :title,
    :tr,
    :track,
    :tt,
    :u,
    :ul,
    :var,
    :video,
    :wbr,
    :hr,
    :br,
    # :"!--...--",
    # :"!doctype",
  ]

  HTML_ATTRIBUTES = {
    accept: :default,
    #accept-charset: :default,
    accept_charset: :default,
    accesskey: :default,
    action: :default,
    align: :default,
    alt: :default,
    async: :js,
    autocomplete: :default,
    autofocus: :default,
    autoplay: :default,
    bgcolor: :default,
    border: :default,
    charset: :default,
    checked: :default,
    cite: :default,
    class: :default,
    color: :default,
    cols: :default,
    colspan: :default,
    content: :default,
    contenteditable: :default,
    controls: :default,
    coords: :default,
    data: :default,
    #data-*: :default,
    datetime: :default,
    default: :default,
    defer: :js,
    dir: :default,
    dirname: :default,
    disabled: :default,
    download: :default,
    draggable: :default,
    enctype: :default,
    for: :default,
    form: :default,
    formaction: :default,
    headers: :default,
    height: :default,
    hidden: :default,
    high: :default,
    href: :default,
    hreflang: :default,
    #http-equiv: :default,
    http_equiv: :default,
    id: :default,
    ismap: :default,
    kind: :default,
    label: :default,
    lang: :default,
    list: :default,
    loop: :default,
    low: :default,
    max: :default,
    maxlength: :default,
    media: :default,
    method: :default,
    min: :default,
    multiple: :default,
    muted: :default,
    name: :default,
    novalidate: :default,
    onabort: :js,
    onafterprint: :js,
    onbeforeprint: :js,
    onbeforeunload: :js,
    onblur: :js,
    oncanplay: :js,
    oncanplaythrough: :js,
    onchange: :js,
    onclick: :js,
    oncontextmenu: :js,
    oncopy: :js,
    oncuechange: :js,
    oncut: :js,
    ondblclick: :js,
    ondrag: :js,
    ondragend: :js,
    ondragenter: :js,
    ondragleave: :js,
    ondragover: :js,
    ondragstart: :js,
    ondrop: :js,
    ondurationchange: :js,
    onemptied: :js,
    onended: :js,
    onerror: :js,
    onfocus: :js,
    onhashchange: :js,
    oninput: :js,
    oninvalid: :js,
    onkeydown: :js,
    onkeypress: :js,
    onkeyup: :js,
    onload: :js,
    onloadeddata: :js,
    onloadedmetadata: :js,
    onloadstart: :js,
    onmousedown: :js,
    onmousemove: :js,
    onmouseout: :js,
    onmouseover: :js,
    onmouseup: :js,
    onmousewheel: :js,
    onoffline: :js,
    ononline: :js,
    onpagehide: :js,
    onpageshow: :js,
    onpaste: :js,
    onpause: :js,
    onplay: :js,
    onplaying: :js,
    onpopstate: :js,
    onprogress: :js,
    onratechange: :js,
    onreset: :js,
    onresize: :js,
    onscroll: :js,
    onsearch: :js,
    onseeked: :js,
    onseeking: :js,
    onselect: :js,
    onstalled: :js,
    onstorage: :js,
    onsubmit: :js,
    onsuspend: :js,
    ontimeupdate: :js,
    ontoggle: :js,
    onunload: :js,
    onvolumechange: :js,
    onwaiting: :js,
    onwheel: :js,
    open: :default,
    optimum: :default,
    pattern: :default,
    placeholder: :default,
    poster: :default,
    preload: :default,
    readonly: :default,
    rel: :default,
    required: :default,
    reversed: :default,
    rows: :default,
    rowspan: :default,
    sandbox: :default,
    scope: :default,
    selected: :default,
    shape: :default,
    size: :default,
    sizes: :default,
    span: :default,
    spellcheck: :default,
    src: :default,
    srcdoc: :default,
    srclang: :default,
    srcset: :default,
    start: :default,
    step: :default,
    style: :default,
    tabindex: :default,
    target: :default,
    title: :default,
    translate: :default,
    type: :default,
    usemap: :default,
    value: :default,
    width: :default,
    wrap: :default,
  }

  HTML_TAGS.each do |tagname|
    define_method tagname do  |*args, safe_join_with: "", **opts, &blk|
      opts.each do |key,value|
        case HTML_ATTRIBUTES[key]
        when :default
          case opts[key]
          when nil, String #fastpath
          when Hash
            opts = opts.merge(key => safe_join(opts[key].values, " "))
          when Array
            opts = opts.merge(key => safe_join(opts[key].map(&:to_s), " "))
          end
        when :style
          case opts[:style]
          when nil, String #fastpath
          when Hash
            opts = opts.merge(style: safe_join(opts[:style].map {|key,value| safe_join([key, value], ": ")}, " ; "))
          when Array
            opts = opts.merge(style: safe_join(opts[:style].map(&:to_s), " ; "))
          end
        when :js
          case opts[key]
          when nil, String # fastpath
          when Hash
            opts = opts.merge(key => safe_join(opts[key].values, " ; "))
          when Array
            opts = opts.merge(key => safe_join(opts[key].map(&:to_s), " ; "))
          end 
        end
      end
      content_tag(tagname, safe_join(args.flatten, safe_join_with), **opts, &blk)
    end
  end
end

ActiveSupport.on_load(:action_controller) do
  ActionController::Base.helper ActiveHtmlTags
end
